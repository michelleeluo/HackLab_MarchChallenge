#By: Michelle Luo
#March 10 2018

VAR = 'x'


def differentiate(expr: str) -> str:
    '''Differentiate simple expression expr and return the result as a string.
    An expression is simple if its derivation only requires use of the power/exponent rule.
    Keep negative powers - do not convert to fractions.
    Preconditions:
        - all numbers are integers
        - all powers EXCEPT powers of one are prefixed with a '^'
          AND they can be negative
          AND they can be of any length
          ex: x to the power of negative twenty two is x^-123
        - coefficients can be of any length
        - all input expressions are single variable: 'x'
          AND have only one term
    :param expr: the expression to differentiate
    :return: the derivative of the input expression

    >>> differentiate('44')
    '0'
    >>> differentiate('x^123')
    '123x^122'
    >>> differentiate('-12x^3')
    '-36x^2'
    '''

    #global VAR  # use this for your variable

    if '^' not in expr:
        return '0'
    parts = expr.split('^')
    if len(parts[0]) == 1:
        coef = 1
    else:
        coef = int(parts[0][:-1])
    power = int(parts[1])
    coef = coef * power
    power -= 1
    return str(coef) + VAR + '^' + str(power)
    

def calculate_heat(d: dict) -> int:
    '''Returns the total heat generated by all of the magic orbs

    Gazoulee is a fortune teller that owns many magic orbs, each of
    which generate a constant amount of heat. He is building a
    house that he will move into shorty which needs to be kept at a steady
    temperature for the rest of his contraptions to function correctly.
    Gazoulee must tell his HVAC contractor how much heat will be
    generated by his magic orbs so that the contractor can properly
    design the HVAC system.

    Gazoulee has hired you to do the total heat calculations for him,
    given necessary quantities and measurements.

    NOTES:
        - all distances are in centimeters.
        - every 2 square centimeters of a magic orb dissipates 4 J (4 joules) of heat.
        - answers should be rounded down to the nearest whole joule.
        - each dictionary entry contains the information for that magic orb type
        - the value of each dictionary entry is a tuple of:
            (<radius>, <number of magic orbs with this dimension>)

    :param d: dictionary containing the details of all of the magic orbs
    :return: the total heat generated by all of Gazoulee's magic orbs in joules

    >>> calculate_heat({"Standard Wizarding Orb": (7.5, 12), "Alfredo the Orb": (17.5, 1)})
    24662
    '''
    # SA = 4*pi*r^2
    area = 0
    lst = list(d.values())
    for i in lst:
        sa = (i[0]**2) * 4 * 3.141592654 * i[1]
        area += sa
    return round(area) * 2
    

def is_balanced(lst: list) -> bool:
    '''Returns whether list lst is composed entirely of only 'C', 'S' pairs.

    NOTES:
        - only lists composed of 'C's and 'S's are balanced lists
        - the 'C' and 'S' pairs can be interleaved

    HINT:
        - every 'C' must eventually have a corresponding 'S' further in the list

    :param lst: 
    :return: whether the list lst is balanced

    >>> is_balanced(['C', 'S'])
    True
    >>> is_balanced(['S', 'C'])
    False
    >>> is_balanced(['C', 'S', 'S'])
    False
    >>> is_balanced(['C', 'S', 'C', 'C', 'S', 'C', 'S', 'S'])
    True
    '''
    
    c = ''
    s = ''
    for i in lst:
        if i != 'C' and i !='S':
            return False
        elif i == 'C':
            c += i
        elif i == 'S' and c != '':
            c = c[:-1]
        else:
            s += i
    if c == '' and s == '':
        return True
    return False
